package fs2
package interop
package reactive
package examples

import akka._
import akka.stream._
import akka.stream.scaladsl._
import akka.actor.ActorSystem
import org.reactivestreams._

object AkkaStreamsToFs2Example extends App {

  implicit val system = ActorSystem("akka-example-system")
  implicit val materializer = ActorMaterializer()
  implicit val strategy = Strategy.fromFixedDaemonPool(1, "akka-example-strategy")

  val source: Source[Int, NotUsed] = Source(1 to 100)

  val sink: Sink[Int, Publisher[Int]] = Sink.asPublisher[Int](fanout = false)

  val publisher: Publisher[Int] = source.runWith(sink)
  val result = publisher.toStream[Task].runLog.unsafeRun
}

object AkkaStreamsFromFs2Example extends App {


  implicit val system = ActorSystem("akka-example-system")
  implicit val materializer = ActorMaterializer()
  implicit val strategy = Strategy.fromFixedDaemonPool(1, "akka-example-strategy")

  val stream: Stream[Task, Int] = Stream((1 to 100):_*)

  val source: Source[Int, NotUsed] = Source.fromPublisher(stream.toUnicastPublisher)
  source.runForeach(i => println(i))
}

// Thoughts:
// perhaps this should be in a test, so we can verify output
// perhaps this should be in docs, generated by doctest
// should get one for Monix, RXScala, etc
